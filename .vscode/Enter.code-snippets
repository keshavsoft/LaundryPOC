{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Empty Start Function": {
		"scope": "javascript,typescript",
		"prefix": "KStartFunc",
		"body": [
			"const StartFunc = ($1) => {",
			"   	$0",
			"	};",
			"",
			"export { StartFunc };"
		],
		"description": "Log output to console"
	},
	"Mock Template Function": {
		"scope": "javascript,typescript",
		"prefix": "KMock",
		"body": [
			"if (CommonMock.AllowMock) {",
			"if (CommonMock.MockKey === '$1') {",
			"let LocalMockData = require('./$TM_FILENAME_BASE.json');",
			"};",
			"};"
		],
		"description": "Log output to console"
	},
	"Mock Template Function with Promise Then": {
		"scope": "javascript,typescript",
		"prefix": "KMockPromise",
		"body": [
			"if (CommonMock.AllowMock) {",
			"	if (CommonMock.MockKey === '$1') {",
			"		let LocalMockData = require('./import.json');",
			"",
			"		StartFunc({",
			"			inDataPK: CommonMock.DataPK,",
			"			...LocalMockData",
			"		}).then(PromiseData => {",
			"			console.log('PromiseData : ', PromiseData);",
			"           $0",
			"		});",
			"	};",
			"};"
		],
		"description": "Log output to console"
	},
	"Mock Template Function For Html": {
		"scope": "javascript,typescript",
		"prefix": "KMockHtml",
		"body": [
			"let jFLocal$1 = ({ in$1 }) => {",
			"	let jVarLocalHtmlId = '$1';",
			"   let jVarLocal$1 = document.getElementById(jVarLocalHtmlId);",
			"   jVarLocal$1.innerHTML = in$1;",
			"};"
		],
		"description": "Log output to console"
	}









	

    
 

 
};

}